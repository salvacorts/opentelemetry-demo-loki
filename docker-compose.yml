# Copyright The OpenTelemetry Authors
# SPDX-License-Identifier: Apache-2.0

networks:
  default:
    name: opentelemetry-demo
    driver: bridge

services:
  # ******************
  # Core Demo Services
  # ******************
  # Accounting service
  accountingservice:
    image: ${IMAGE_NAME}:${DEMO_VERSION}-accountingservice
    container_name: accounting-service
    build:
      context: ./
      dockerfile: ${ACCOUNTING_SERVICE_DOCKERFILE}
      cache_from:
        - ${IMAGE_NAME}:${IMAGE_VERSION}-accountingservice
    deploy:
      resources:
        limits:
          memory: 120M
    restart: unless-stopped
    environment:
      - KAFKA_SERVICE_ADDR
    depends_on:
      kafka:
        condition: service_healthy

  # AdService
  adservice:
    image: ${IMAGE_NAME}:${DEMO_VERSION}-adservice
    container_name: ad-service
    build:
      context: ./
      dockerfile: ${AD_SERVICE_DOCKERFILE}
      cache_from:
        - ${IMAGE_NAME}:${IMAGE_VERSION}-adservice
    deploy:
      resources:
        limits:
          memory: 300M
    restart: unless-stopped
    ports:
      - "${AD_SERVICE_PORT}"
    environment:
      - AD_SERVICE_PORT
      - FLAGD_HOST
      - FLAGD_PORT
    depends_on:
      flagd:
        condition: service_started


  # Cart service
  cartservice:
    image: ${IMAGE_NAME}:${DEMO_VERSION}-cartservice
    container_name: cart-service
    build:
      context: ./
      dockerfile: ${CART_SERVICE_DOCKERFILE}
      cache_from:
        - ${IMAGE_NAME}:${IMAGE_VERSION}-cartservice
    deploy:
      resources:
        limits:
          memory: 160M
    restart: unless-stopped
    ports:
      - "${CART_SERVICE_PORT}"
    environment:
      - CART_SERVICE_PORT
      - FLAGD_HOST
      - FLAGD_PORT
      - VALKEY_ADDR
      - ASPNETCORE_URLS=http://*:${CART_SERVICE_PORT}
    depends_on:
      valkey-cart:
        condition: service_started
      flagd:
        condition: service_started


  # Checkout service
  checkoutservice:
    image: ${IMAGE_NAME}:${DEMO_VERSION}-checkoutservice
    container_name: checkout-service
    build:
      context: ./
      dockerfile: ${CHECKOUT_SERVICE_DOCKERFILE}
      cache_from:
        - ${IMAGE_NAME}:${IMAGE_VERSION}-checkoutservice
    deploy:
      resources:
        limits:
          memory: 20M
    restart: unless-stopped
    ports:
      - "${CHECKOUT_SERVICE_PORT}"
    environment:
      - FLAGD_HOST
      - FLAGD_PORT
      - CHECKOUT_SERVICE_PORT
      - CART_SERVICE_ADDR
      - CURRENCY_SERVICE_ADDR
      - EMAIL_SERVICE_ADDR
      - PAYMENT_SERVICE_ADDR
      - PRODUCT_CATALOG_SERVICE_ADDR
      - SHIPPING_SERVICE_ADDR
      - KAFKA_SERVICE_ADDR
    depends_on:
      cartservice:
        condition: service_started
      currencyservice:
        condition: service_started
      emailservice:
        condition: service_started
      paymentservice:
        condition: service_started
      productcatalogservice:
        condition: service_started
      shippingservice:
        condition: service_started
      kafka:
        condition: service_healthy
      flagd:
        condition: service_started

  # Currency service
  currencyservice:
    image: ${IMAGE_NAME}:${DEMO_VERSION}-currencyservice
    container_name: currency-service
    build:
      context: ./
      dockerfile: ${CURRENCY_SERVICE_DOCKERFILE}
      cache_from:
        - ${IMAGE_NAME}:${IMAGE_VERSION}-currencyservice
    deploy:
      resources:
        limits:
          memory: 20M
    restart: unless-stopped
    ports:
      - "${CURRENCY_SERVICE_PORT}"
    environment:
      - CURRENCY_SERVICE_PORT
      - VERSION=${IMAGE_VERSION}

  # Email service
  emailservice:
    image: ${IMAGE_NAME}:${DEMO_VERSION}-emailservice
    container_name: email-service
    build:
      context: ./
      dockerfile: ${EMAIL_SERVICE_DOCKERFILE}
      cache_from:
        - ${IMAGE_NAME}:${IMAGE_VERSION}-emailservice
    deploy:
      resources:
        limits:
          memory: 100M
    restart: unless-stopped
    ports:
      - "${EMAIL_SERVICE_PORT}"
    environment:
      - APP_ENV=production
      - EMAIL_SERVICE_PORT

  # Fraud Detection service
  frauddetectionservice:
    image: ${IMAGE_NAME}:${DEMO_VERSION}-frauddetectionservice
    container_name: frauddetection-service
    build:
      context: ./
      dockerfile: ${FRAUD_SERVICE_DOCKERFILE}
      cache_from:
        - ${IMAGE_NAME}:${IMAGE_VERSION}-frauddetectionservice
    deploy:
      resources:
        limits:
          memory: 300M
    restart: unless-stopped
    environment:
      - FLAGD_HOST
      - FLAGD_PORT
      - KAFKA_SERVICE_ADDR
    depends_on:
      kafka:
        condition: service_healthy

  # Frontend
  frontend:
    image: ${IMAGE_NAME}:${DEMO_VERSION}-frontend
    container_name: frontend
    build:
      context: ./
      dockerfile: ${FRONTEND_DOCKERFILE}
      cache_from:
        - ${IMAGE_NAME}:${IMAGE_VERSION}-frontend
    deploy:
      resources:
        limits:
          memory: 250M
    restart: unless-stopped
    ports:
      - "${FRONTEND_PORT}"
    environment:
      - PORT=${FRONTEND_PORT}
      - FRONTEND_ADDR
      - AD_SERVICE_ADDR
      - CART_SERVICE_ADDR
      - CHECKOUT_SERVICE_ADDR
      - CURRENCY_SERVICE_ADDR
      - PRODUCT_CATALOG_SERVICE_ADDR
      - RECOMMENDATION_SERVICE_ADDR
      - SHIPPING_SERVICE_ADDR
      - ENV_PLATFORM
      - FLAGD_HOST
      - FLAGD_PORT
    depends_on:
      adservice:
        condition: service_started
      cartservice:
        condition: service_started
      checkoutservice:
        condition: service_started
      currencyservice:
        condition: service_started
      productcatalogservice:
        condition: service_started
      quoteservice:
        condition: service_started
      recommendationservice:
        condition: service_started
      shippingservice:
        condition: service_started
      imageprovider:
        condition: service_started
      flagd:
        condition: service_started

  # Frontend Proxy (Envoy)
  frontendproxy:
    image: ${IMAGE_NAME}:${DEMO_VERSION}-frontendproxy
    container_name: frontend-proxy
    build:
      context: ./
      dockerfile: ${FRONTEND_PROXY_DOCKERFILE}
    deploy:
      resources:
        limits:
          memory: 50M
    restart: unless-stopped
    ports:
      - "${ENVOY_PORT}:${ENVOY_PORT}"
      - 10000:10000
    environment:
      - FRONTEND_PORT
      - FRONTEND_HOST
      - LOCUST_WEB_HOST
      - LOCUST_WEB_PORT
      - GRAFANA_SERVICE_PORT
      - GRAFANA_SERVICE_HOST
      - IMAGE_PROVIDER_HOST
      - IMAGE_PROVIDER_PORT
      - ENVOY_PORT
      - FLAGD_HOST
      - FLAGD_PORT
    depends_on:
      frontend:
        condition: service_started
      loadgenerator:
        condition: service_started
      grafana:
        condition: service_started

  # Imageprovider
  imageprovider:
    image: ${IMAGE_NAME}:${DEMO_VERSION}-imageprovider
    container_name: imageprovider
    build:
      context: ./
      dockerfile: ${IMAGE_PROVIDER_DOCKERFILE}
      cache_from:
        - ${IMAGE_NAME}:${IMAGE_VERSION}-imageprovider
    deploy:
      resources:
        limits:
          memory: 120M
    restart: unless-stopped
    ports:
      - "${IMAGE_PROVIDER_PORT}"
    environment:
      - IMAGE_PROVIDER_PORT

  # Load Generator
  loadgenerator:
    image: ${IMAGE_NAME}:${DEMO_VERSION}-loadgenerator
    container_name: load-generator
    build:
      context: ./
      dockerfile: ${LOAD_GENERATOR_DOCKERFILE}
      cache_from:
        - ${IMAGE_NAME}:${IMAGE_VERSION}-loadgenerator
    deploy:
      resources:
        limits:
          memory: 1G
    restart: unless-stopped
    ports:
      - "${LOCUST_WEB_PORT}"
    environment:
      - LOCUST_WEB_PORT
      - LOCUST_USERS
      - LOCUST_HOST
      - LOCUST_HEADLESS
      - LOCUST_AUTOSTART
      - LOCUST_BROWSER_TRAFFIC_ENABLED=false
      - PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION=python
      - LOCUST_WEB_HOST=0.0.0.0
      - FLAGD_HOST
      - FLAGD_PORT
    depends_on:
      frontend:
        condition: service_started
      flagd:
        condition: service_started

  # Payment service
  paymentservice:
    image: ${IMAGE_NAME}:${DEMO_VERSION}-paymentservice
    container_name: payment-service
    build:
      context: ./
      dockerfile: ${PAYMENT_SERVICE_DOCKERFILE}
      cache_from:
        - ${IMAGE_NAME}:${IMAGE_VERSION}-paymentservice
    deploy:
      resources:
        limits:
          memory: 120M
    restart: unless-stopped
    ports:
      - "${PAYMENT_SERVICE_PORT}"
    environment:
      - PAYMENT_SERVICE_PORT
      - FLAGD_HOST
      - FLAGD_PORT
    depends_on:
      flagd:
        condition: service_started

  # Product Catalog service
  productcatalogservice:
    image: ${IMAGE_NAME}:${DEMO_VERSION}-productcatalogservice
    container_name: product-catalog-service
    build:
      context: ./
      dockerfile: ${PRODUCT_CATALOG_DOCKERFILE}
      cache_from:
        - ${IMAGE_NAME}:${IMAGE_VERSION}-productcatalogservice
    deploy:
      resources:
        limits:
          memory: 20M
    restart: unless-stopped
    ports:
      - "${PRODUCT_CATALOG_SERVICE_PORT}"
    environment:
      - PRODUCT_CATALOG_SERVICE_PORT
      - FLAGD_HOST
      - FLAGD_PORT
    depends_on:
      flagd:
        condition: service_started

  # Quote service
  quoteservice:
    image: ${IMAGE_NAME}:${DEMO_VERSION}-quoteservice
    container_name: quote-service
    build:
      context: ./
      dockerfile: ${QUOTE_SERVICE_DOCKERFILE}
      cache_from:
        - ${IMAGE_NAME}:${IMAGE_VERSION}-quoteservice
    deploy:
      resources:
        limits:
          memory: 40M
    restart: unless-stopped
    ports:
      - "${QUOTE_SERVICE_PORT}"
    environment:
      - QUOTE_SERVICE_PORT

  # Recommendation service
  recommendationservice:
    image: ${IMAGE_NAME}:${DEMO_VERSION}-recommendationservice
    container_name: recommendation-service
    build:
      context: ./
      dockerfile: ${RECOMMENDATION_SERVICE_DOCKERFILE}
      cache_from:
        - ${IMAGE_NAME}:${IMAGE_VERSION}-recommendationservice
    deploy:
      resources:
        limits:
          memory: 500M               # This is high to enable supporting the recommendationCache feature flag use case
    restart: unless-stopped
    ports:
      - "${RECOMMENDATION_SERVICE_PORT}"
    environment:
      - RECOMMENDATION_SERVICE_PORT
      - PRODUCT_CATALOG_SERVICE_ADDR
      - FLAGD_HOST
      - FLAGD_PORT
      - PROTOCOL_BUFFERS_PYTHON_IMPLEMENTATION=python
    depends_on:
      productcatalogservice:
        condition: service_started
      flagd:
        condition: service_started

  # Shipping service
  shippingservice:
    image: ${IMAGE_NAME}:${DEMO_VERSION}-shippingservice
    container_name: shipping-service
    build:
      context: ./
      dockerfile: ${SHIPPING_SERVICE_DOCKERFILE}
      cache_from:
        - ${IMAGE_NAME}:${IMAGE_VERSION}-shippingservice
    deploy:
      resources:
        limits:
          memory: 20M
    restart: unless-stopped
    ports:
      - "${SHIPPING_SERVICE_PORT}"
    environment:
      - SHIPPING_SERVICE_PORT
      - QUOTE_SERVICE_ADDR

  # ******************
  # Dependent Services
  # ******************
  # Flagd, feature flagging service
  flagd:
    image: ${FLAGD_IMAGE}
    container_name: flagd
    deploy:
      resources:
        limits:
          memory: 50M
    command: [
      "start",
      "--uri",
      "file:./etc/flagd/demo.flagd.json"
    ]
    ports:
      - 8013
    volumes:
      - ./src/flagd:/etc/flagd

  # Kafka used by Checkout, Accounting, and Fraud Detection services
  kafka:
    image: ${IMAGE_NAME}:${DEMO_VERSION}-kafka
    container_name: kafka
    build:
      context: ./
      dockerfile: ${KAFKA_SERVICE_DOCKERFILE}
      cache_from:
        - ${IMAGE_NAME}:${IMAGE_VERSION}-kafka
    deploy:
      resources:
        limits:
          memory: 600M
    restart: unless-stopped
    environment:
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_HEAP_OPTS=-Xmx400m -Xms400m
    healthcheck:
      test: nc -z kafka 9092
      start_period: 10s
      interval: 5s
      timeout: 10s
      retries: 10

  # Valkey used by Cart service
  valkey-cart:
    image: ${VALKEY_IMAGE}
    container_name: valkey-cart
    user: valkey
    deploy:
      resources:
        limits:
          memory: 20M
    restart: unless-stopped
    ports:
      - "${VALKEY_PORT}"


#  # ********************
#  # Telemetry Components
#  # ********************

  # Grafana
  grafana:
    image: ${GRAFANA_IMAGE}
    container_name: grafana
    deploy:
      resources:
        limits:
          memory: 100M
    restart: unless-stopped
    volumes:
      - ./src/grafana/grafana.ini:/etc/grafana/grafana.ini
      - ./src/grafana/provisioning/:/etc/grafana/provisioning/
    ports:
      - "${GRAFANA_SERVICE_PORT}:${GRAFANA_SERVICE_PORT}"

  # Prometheus
  prometheus:
    image: ${PROMETHEUS_IMAGE}
    container_name: prometheus
    command:
      - --web.console.templates=/etc/prometheus/consoles
      - --web.console.libraries=/etc/prometheus/console_libraries
      - --storage.tsdb.retention.time=1h
      - --config.file=/etc/prometheus/prometheus-config.yaml
      - --storage.tsdb.path=/prometheus
      - --web.enable-lifecycle
      - --web.route-prefix=/
      - --enable-feature=exemplar-storage
      - --enable-feature=otlp-write-receiver
      - --enable-feature=remote-write-receiver
    volumes:
      - ./src/prometheus/prometheus-config.yaml:/etc/prometheus/prometheus-config.yaml
    deploy:
      resources:
        limits:
          memory: 300M
    restart: unless-stopped
    ports:
      - "${PROMETHEUS_SERVICE_PORT}:${PROMETHEUS_SERVICE_PORT}"

  # Loki
  loki:
    image: ${LOKI_IMAGE}
    container_name: loki
    command:
      - -target=all
      - -config.file=/etc/loki/config.yaml
    volumes:
      - ./src/loki/config.yaml:/etc/loki/config.yaml
    deploy:
      resources:
        limits:
          memory: 300M
    restart: unless-stopped
    ports:
    - "${LOKI_SERVICE_PORT}:${LOKI_SERVICE_PORT}"

  # MINIO (S3 compatible storage, used by Loki)
  minio:
    image: minio/minio
    entrypoint:
      - sh
      - -euc
      - |
        mkdir -p /data/loki-data && \
        mkdir -p /data/loki-ruler &&
        minio server --address "0.0.0.0:9000" --console-address "0.0.0.0:9001" /data
    environment:
      - MINIO_ROOT_USER=loki
      - MINIO_ROOT_PASSWORD=supersecret
      - MINIO_PROMETHEUS_AUTH_TYPE=public
      - MINIO_UPDATE=off
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - ./src/minio/.data/:/data

  # Alloy
  alloy:
    image: ${ALLOY_IMAGE}
    container_name: alloy
    command:
      - run
      - --server.http.listen-addr=0.0.0.0:${ALLOY_SERVICE_PORT}
      - /etc/alloy/config.alloy
    restart: unless-stopped
    ports:
      - "${ALLOY_SERVICE_PORT}:${ALLOY_SERVICE_PORT}"
    volumes:
      - ./src/alloy/config.alloy:/etc/alloy/config.alloy
      - ${DOCKER_SOCK}:/var/run/docker.sock:ro
